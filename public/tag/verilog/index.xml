<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Verilog | FLORENCIA GRATTAROLA</title><link>http://localhost:1313/tag/verilog/</link><atom:link href="http://localhost:1313/tag/verilog/index.xml" rel="self" type="application/rss+xml"/><description>Verilog</description><generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Tue, 18 Apr 2023 00:00:00 +0000</lastBuildDate><image><url>http://localhost:1313/media/icon_hu_2ac6985030d8f1fc.png</url><title>Verilog</title><link>http://localhost:1313/tag/verilog/</link></image><item><title>ðŸŽ‰ Verilog Codes</title><link>http://localhost:1313/project/verilog/</link><pubDate>Tue, 18 Apr 2023 00:00:00 +0000</pubDate><guid>http://localhost:1313/project/verilog/</guid><description>&lt;p>&lt;a href="https://github.com/sainavaneet/Verilog/" target="_blank" rel="noopener">ðŸ‘‰ Developed Verilog HDL code for a 4-bit adder, 4-to-1 multiplexer, AND gate, BUF gate, and an inverter with delay.&lt;/a>&lt;/p>
&lt;h3 id="system-that-generates-detects-and-corrects-hamming-code">System that generates, detects, and corrects Hamming Code&lt;/h3>
&lt;p>âž” Module implements the Hamming code encoder for each of the 16 input parts.&lt;/p>
&lt;p>âž” Module converts a binary input into separate ASCII characters.&lt;/p>
&lt;p>&lt;a href="https://github.com/sainavaneet/system-that-generates-detects-and-corrects-Hamming-Code" target="_blank" rel="noopener">ðŸ‘‰ Developed Verilog HDL code for the system that generates, detects, and corrects Hamming Code.&lt;/a>&lt;/p>
&lt;p>Verilog code examples that demonstrate various functionalities and designs. Each module is implemented as a separate Verilog file.&lt;/p>
&lt;h2 id="contents">Contents&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#bintoascii">bintoascii&lt;/a>&lt;/li>
&lt;li>&lt;a href="#bintoascii_tb">bintoascii_tb&lt;/a>&lt;/li>
&lt;li>&lt;a href="#hamming">hamming&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="bintoascii">bintoascii&lt;/h3>
&lt;p>This module converts a binary input into separate ASCII characters.&lt;/p>
&lt;h4 id="inputs">Inputs&lt;/h4>
&lt;ul>
&lt;li>&lt;code>binary_input&lt;/code> (112 bits): Binary input data.&lt;/li>
&lt;/ul>
&lt;h4 id="outputs">Outputs&lt;/h4>
&lt;ul>
&lt;li>&lt;code>part_7790_0&lt;/code> to &lt;code>part_7790_15&lt;/code> (7 bits each): ASCII characters derived from the binary input.&lt;/li>
&lt;/ul>
&lt;h3 id="bintoascii_tb">bintoascii_tb&lt;/h3>
&lt;p>This is a testbench module for the &lt;code>bintoascii&lt;/code> module. It provides stimulus to the module and displays the output ASCII characters.&lt;/p>
&lt;h4 id="inputs-1">Inputs&lt;/h4>
&lt;ul>
&lt;li>&lt;code>binary_input&lt;/code> (112 bits): Binary input data.&lt;/li>
&lt;/ul>
&lt;h4 id="outputs-1">Outputs&lt;/h4>
&lt;ul>
&lt;li>&lt;code>part_7790_0&lt;/code> to &lt;code>part_7790_15&lt;/code> (7 bits each): ASCII characters derived from the binary input.&lt;/li>
&lt;/ul>
&lt;h3 id="hamming">hamming&lt;/h3>
&lt;p>This module implements the Hamming code encoder for each of the 16 input parts.&lt;/p>
&lt;h4 id="inputs-2">Inputs&lt;/h4>
&lt;ul>
&lt;li>&lt;code>part_7790_0&lt;/code> to &lt;code>part_7790_15&lt;/code> (7 bits each): Input data for each part.&lt;/li>
&lt;/ul>
&lt;h4 id="outputs-2">Outputs&lt;/h4>
&lt;ul>
&lt;li>&lt;code>out_77990_0&lt;/code> to &lt;code>out_77990_15&lt;/code> (11 bits each): Hamming code output for each part.&lt;/li>
&lt;/ul></description></item><item><title>32 bit CPU based on MIPS architecture</title><link>http://localhost:1313/project/32-bit-cpu-based-on-mips-architecture/</link><pubDate>Tue, 18 Apr 2023 00:00:00 +0000</pubDate><guid>http://localhost:1313/project/32-bit-cpu-based-on-mips-architecture/</guid><description>&lt;p>Implementation of a 32-bit MIPS Processor using Verilog HDL. The processor is capable of executing various MIPS instructions and includes key components such as the Instruction Memory, Register File, ALU, Data Memory, and Control Unit.&lt;/p>
&lt;h2 id="instruction-set">Instruction Set&lt;/h2>
&lt;p>The MIPS Processor supports the following instructions:&lt;/p>
&lt;ol>
&lt;li>&lt;code>ADD rd, rs, rt&lt;/code>: Reg[rd] = Reg[rs] + Reg[rt]&lt;/li>
&lt;li>&lt;code>BNE rs, rt, imm16&lt;/code>: Branch if (Reg[rs] != Reg[rt])&lt;/li>
&lt;li>&lt;code>J target&lt;/code>: Jump to the specified target address&lt;/li>
&lt;li>&lt;code>JR rs&lt;/code>: Jump to the address stored in Reg[rs]&lt;/li>
&lt;li>&lt;code>LW rt, imm16(rs)&lt;/code>: Load data from memory to Reg[rt]&lt;/li>
&lt;li>&lt;code>SLT rd, rs, rt&lt;/code>: Set Reg[rd] to 1 if (Reg[rs] &amp;lt; Reg[rt]), otherwise 0&lt;/li>
&lt;li>&lt;code>SUB rd, rs, rt&lt;/code>: Reg[rd] = Reg[rs] - Reg[rt]&lt;/li>
&lt;li>&lt;code>SW rt, imm16(rs)&lt;/code>: Store data from Reg[rt] to memory&lt;/li>
&lt;li>&lt;code>XORI rt, rs, imm16&lt;/code>: Reg[rt] = Reg[rs] XOR Zero_ext(Imm16)&lt;/li>
&lt;/ol>
&lt;h2 id="architecture">Architecture&lt;/h2>
&lt;p>The MIPS Processor follows a 5-stage pipeline architecture, consisting of the following stages:&lt;/p>
&lt;ol>
&lt;li>Instruction Fetch (IF)&lt;/li>
&lt;li>Instruction Decode (ID)&lt;/li>
&lt;li>Execute (EX)&lt;/li>
&lt;li>Memory Access (MEM)&lt;/li>
&lt;li>Write Back (WB)&lt;/li>
&lt;/ol>
&lt;p>Each stage has its own set of registers and performs specific operations to execute the instructions.&lt;/p>
&lt;h2 id="modules">Modules&lt;/h2>
&lt;p>The design of the MIPS Processor includes the following modules:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>InstructionMem&lt;/strong>: Stores and retrieves instructions based on the provided address.&lt;/li>
&lt;li>&lt;strong>RegFile&lt;/strong>: 32-register file module with read and write operations.&lt;/li>
&lt;li>&lt;strong>Add&lt;/strong>: 32-bit adder module.&lt;/li>
&lt;li>&lt;strong>ALU&lt;/strong>: 32-bit Arithmetic Logic Unit module for performing arithmetic and logical operations.&lt;/li>
&lt;li>&lt;strong>DataMem&lt;/strong>: Data memory module for storing and retrieving 32-bit data values.&lt;/li>
&lt;li>&lt;strong>Control Unit&lt;/strong>: Generates control signals for different stages of the processor pipeline.&lt;/li>
&lt;li>&lt;strong>ForwardingUnit&lt;/strong>: Solves data hazards in the pipelined processor by forwarding correct data to the ALU input.&lt;/li>
&lt;li>&lt;strong>mux3x32to32&lt;/strong>: 3x32 to 32 multiplexer module.&lt;/li>
&lt;li>&lt;strong>mips_32&lt;/strong>: The main module that integrates all the components and implements the 32-bit MIPS Processor.&lt;/li>
&lt;/ol>
&lt;h2 id="testing">Testing&lt;/h2>
&lt;p>A testbench has been created to verify the functionality of the MIPS Processor. It includes test stimuli and checks the behavior of the processor by observing memory addresses and fetched instructions.&lt;/p>
&lt;h2 id="usage">Usage&lt;/h2>
&lt;p>To use the MIPS Processor, you can instantiate the &lt;code>mips_32&lt;/code> module in your Verilog design and provide appropriate inputs. Make sure to adhere to the instruction set and connect any required peripherals or memory modules.&lt;/p></description></item></channel></rss>