<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Drone | Navaneet Portfolio</title>
    <link>http://localhost:1313/tags/drone/</link>
      <atom:link href="http://localhost:1313/tags/drone/index.xml" rel="self" type="application/rss+xml" />
    <description>Drone</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Tue, 06 Jun 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>http://localhost:1313/media/icon_hu_645fa481986063ef.png</url>
      <title>Drone</title>
      <link>http://localhost:1313/tags/drone/</link>
    </image>
    
    <item>
      <title>üéâ Drone Trajectory Tracking with Python</title>
      <link>http://localhost:1313/project/drone-trajectory-tracking/</link>
      <pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/project/drone-trajectory-tracking/</guid>
      <description>&lt;h2 id=&#34;1-dynamics-and-kinematics-of-the-drone&#34;&gt;1. Dynamics and Kinematics of the Drone&lt;/h2&gt;
&lt;p&gt;The dynamics and kinematics of a drone are crucial in understanding and controlling its flight behavior. The drone&amp;rsquo;s state can be described by its position $ x, y, z $
, orientation (roll $ \phi $
, pitch $ \theta $
, and yaw $ \psi $
), and their respective velocities and angular velocities.&lt;/p&gt;
&lt;h3 id=&#34;translational-motion&#34;&gt;Translational Motion&lt;/h3&gt;
&lt;p&gt;The translational motion of the drone can be described by Newton&amp;rsquo;s second law of motion:&lt;/p&gt;

$$
m\ddot{\mathbf{r}} = \mathbf{F} - mg\hat{z}
$$


&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$ m $
 is the mass of the drone.&lt;/li&gt;
&lt;li&gt;$ \ddot{\mathbf{r}} $
 represents the linear acceleration.&lt;/li&gt;
&lt;li&gt;$ \mathbf{F} $
 is the total thrust force generated by the drone&amp;rsquo;s motors.&lt;/li&gt;
&lt;li&gt;$ g $
 is the acceleration due to gravity.&lt;/li&gt;
&lt;li&gt;$ \hat{z} $
 is the unit vector in the vertical direction.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rotational-motion&#34;&gt;Rotational Motion&lt;/h3&gt;
&lt;p&gt;The rotational motion of the drone is described using Euler&amp;rsquo;s equations of motion for a rigid body:&lt;/p&gt;

$$
I \dot{\boldsymbol{\omega}} + \boldsymbol{\omega} \times (I \boldsymbol{\omega}) = \mathbf{\tau}
$$


&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$ I $
 represents the moment of inertia matrix.&lt;/li&gt;
&lt;li&gt;$ \boldsymbol{\omega} $
 is the angular velocity vector (p, q, r).&lt;/li&gt;
&lt;li&gt;$ \mathbf{\tau} $
 is the vector of external torques acting on the drone.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dynamic-system-matrix&#34;&gt;Dynamic System Matrix&lt;/h3&gt;
&lt;p&gt;The dynamics of the drone can be represented in a state-space format, where the state vector $ \mathbf{x} $
 might include the position, velocity, orientation, and angular velocity. The state-space model is typically written as:&lt;/p&gt;

$$
\dot{\mathbf{x}} = A\mathbf{x} + B\mathbf{u}
$$



$$
\mathbf{y} = C\mathbf{x} + D\mathbf{u}
$$


&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$ \mathbf{x} $
 is the state vector.&lt;/li&gt;
&lt;li&gt;$ \mathbf{u} $
 is the input vector (like motor thrusts).&lt;/li&gt;
&lt;li&gt;$ \mathbf{y} $
 is the output vector (like measured position and orientation).&lt;/li&gt;
&lt;li&gt;$ A $
 is the system matrix, representing the dynamics of the drone.&lt;/li&gt;
&lt;li&gt;$ B $
 is the input matrix, showing how inputs affect the state.&lt;/li&gt;
&lt;li&gt;$ C $
 is the output matrix, linking the state to the outputs.&lt;/li&gt;
&lt;li&gt;$ D $
 is the direct transmission matrix, usually a zero matrix in drone dynamics.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The matrices $$ A, B, C, D $$
 are determined based on the physical characteristics of the drone and its operational environment. They encapsulate the dynamics and kinematics, converting control inputs into predictions about the drone&amp;rsquo;s future state.&lt;/p&gt;
&lt;h2 id=&#34;2-control-system&#34;&gt;2. Control System&lt;/h2&gt;
&lt;h3 id=&#34;control-inputs&#34;&gt;Control Inputs&lt;/h3&gt;
&lt;p&gt;The control inputs for the drone include thrust $$ U1 $$
 and torques $$ U2, U3, U4 $$
. These inputs are calculated as follows:&lt;/p&gt;

$$
U1 = c_t(\omega_1^2 + \omega_2^2 + \omega_3^2 + \omega_4^2)
$$



$$
U2 = c_t l (\omega_2^2 - \omega_4^2)
$$



$$
U3 = c_t l (\omega_3^2 - \omega_1^2)
$$



$$
U4 = c_q (-\omega_1^2 + \omega_2^2 - \omega_3^2 + \omega_4^2)
$$


&lt;h2 id=&#34;3-trajectory-generation&#34;&gt;3. Trajectory Generation&lt;/h2&gt;
&lt;p&gt;The desired trajectory is represented as a function of time $ t $
:&lt;/p&gt;

$$
X_{ref}(t), Y_{ref}(t), Z_{ref}(t), \psi_{ref}(t)
$$


&lt;h2 id=&#34;4-linear-parameter-varying-lpv-systems&#34;&gt;4. Linear Parameter Varying (LPV) Systems&lt;/h2&gt;
&lt;p&gt;LPV systems are described by the following equations:&lt;/p&gt;

$$
\dot{x}(t) = A(t)x(t) + B(t)u(t)
$$



$$
y(t) = C(t)x(t) + D(t)u(t)
$$


&lt;h2 id=&#34;5-model-predictive-control-mpc&#34;&gt;5. Model Predictive Control (MPC)&lt;/h2&gt;
&lt;p&gt;Model Predictive Control (MPC) is an advanced method of process control that uses a dynamic model to predict and optimize future states of a control system. In the context of drone trajectory tracking, MPC is used to compute the optimal control inputs that will guide the drone along a desired trajectory. The basic formulation of an MPC problem can be given as follows:&lt;/p&gt;

$$
\min_{u} \sum_{k=0}^{N-1} \left( (x_k - x_{ref})^T Q (x_k - x_{ref}) + (u_k - u_{ref})^T R (u_k - u_{ref}) \right)
$$


&lt;p&gt;Subject to the dynamic constraints of the system:&lt;/p&gt;

$$
x_{k+1} = A x_k + B u_k
$$



$$
x_{min} \leq x_k \leq x_{max}
$$



$$
u_{min} \leq u_k \leq u_{max}
$$


&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$ x_k $
 is the state of the system at step $ k $
.&lt;/li&gt;
&lt;li&gt;$ u_k $ is the control input at step $ k $.&lt;/li&gt;
&lt;li&gt;$ x_{ref} $ and $ u_{ref} $ are the reference state and input, respectively.&lt;/li&gt;
&lt;li&gt;$ Q $ and $ R $ are weighting matrices.&lt;/li&gt;
&lt;li&gt;$ N $ is the prediction horizon.&lt;/li&gt;
&lt;li&gt;$ A $ and $ B $ are the system matrices.&lt;/li&gt;
&lt;li&gt;$ x_{min}, x_{max}, u_{min}, u_{max} $ are the bounds on states and inputs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/S4rpkbglb5c?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;
    &lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>üè† Smart-Home-Using-IOT</title>
      <link>http://localhost:1313/project/smart-home-using-iot/</link>
      <pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/project/smart-home-using-iot/</guid>
      <description>&lt;h2 id=&#34;project-overview&#34;&gt;Project Overview&lt;/h2&gt;
&lt;p&gt;Project Name: Home Automation (Smart Home Using Internet of Things)&lt;/p&gt;
&lt;p&gt;Participatory Department: Electronics Engineering, Electrical Engineering&lt;/p&gt;
&lt;p&gt;Project Representative: Sai Navaneet&lt;/p&gt;
&lt;p&gt;Participants:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Corporation: 1&lt;/li&gt;
&lt;li&gt;Professor: 1&lt;/li&gt;
&lt;li&gt;Undergraduate students: 2 (Manisha Lingala, Navaneet)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Period: March 1, 2022, to July 31, 2022 (5 months)&lt;/p&gt;
&lt;p&gt;Project Type: Middle&lt;/p&gt;
&lt;h2 id=&#34;project-background&#34;&gt;Project Background&lt;/h2&gt;
&lt;p&gt;The concept of home automation has been around for a long time, with the vision of fully automated homes and robotic assistance in household chores. However, the technology required to realize these ideas was not readily available until recent times. The project aims to leverage IoT technology to build a working intelligent home application, starting from scratch. The idea of smart homes has been experimented with since the early 19th century, aiming to make lives more comfortable.&lt;/p&gt;
&lt;h2 id=&#34;objectives-and-content&#34;&gt;Objectives and Content&lt;/h2&gt;
&lt;p&gt;The main objectives of the project are as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Increase comfort and quality of life in the house&lt;/li&gt;
&lt;li&gt;Enhance security and energy efficiency through remote-controllable equipment&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To achieve these objectives, the following components are required:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Relays&lt;/li&gt;
&lt;li&gt;Wi-Fi module (ESP32)&lt;/li&gt;
&lt;li&gt;Other basic electronic components&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;project-results&#34;&gt;Project Results&lt;/h2&gt;
&lt;p&gt;The project successfully achieved the following outcomes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Built a model of a house with basic appliances such as lights and fans&lt;/li&gt;
&lt;li&gt;Enabled remote control of these appliances through the cloud from anywhere in the world&lt;/li&gt;
&lt;li&gt;Implemented four types of control methods:
&lt;ul&gt;
&lt;li&gt;Control through the cloud&lt;/li&gt;
&lt;li&gt;Control through a mobile app&lt;/li&gt;
&lt;li&gt;Voice control&lt;/li&gt;
&lt;li&gt;Time-based control&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;circuit-diagram&#34;&gt;Circuit Diagram&lt;/h2&gt;
&lt;p&gt;Below is the circuit diagram of the smart home system:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;flex justify-center	&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Circuit Diagram&#34; srcset=&#34;
               /project/smart-home-using-iot/images/circuit_hu_fe8e23845ccf5a4c.webp 400w,
               /project/smart-home-using-iot/images/circuit_hu_63c4c723cd46e799.webp 760w,
               /project/smart-home-using-iot/images/circuit_hu_b62cac56fc4acf82.webp 1200w&#34;
               src=&#34;http://localhost:1313/project/smart-home-using-iot/images/circuit_hu_fe8e23845ccf5a4c.webp&#34;
               width=&#34;736&#34;
               height=&#34;402&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The circuit diagram showcases the connectivity of various components involved in the project. It includes the relays, Wi-Fi module (ESP32), and other basic electronic components. This diagram provides a visual representation of how the different elements of the system are interconnected to enable the desired functionality.&lt;/p&gt;
&lt;h2 id=&#34;control-methods&#34;&gt;Control Methods&lt;/h2&gt;
&lt;p&gt;The project implemented three different control methods for operating the smart home system:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Control through the Cloud:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;flex justify-center	&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Control through the Cloud&#34; srcset=&#34;
               /project/smart-home-using-iot/images/appESP32_hu_cd0c3eabc49e6947.webp 400w,
               /project/smart-home-using-iot/images/appESP32_hu_beaa95f9a3223ab3.webp 760w,
               /project/smart-home-using-iot/images/appESP32_hu_a62ccc4362a512d6.webp 1200w&#34;
               src=&#34;http://localhost:1313/project/smart-home-using-iot/images/appESP32_hu_cd0c3eabc49e6947.webp&#34;
               width=&#34;330&#34;
               height=&#34;722&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;This method allows users to control the smart home appliances using a web-based interface or application. Users can access the control interface through any internet-connected device, such as a computer or smartphone. It provides convenience and flexibility for managing the devices remotely, even in the absence of a mobile phone.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Control through Voice:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;flex justify-center	&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Control through Voice&#34; srcset=&#34;
               /project/smart-home-using-iot/images/blynk_hu_6607d9ec66dd0d00.webp 400w,
               /project/smart-home-using-iot/images/blynk_hu_85c8c174c0345a81.webp 760w,
               /project/smart-home-using-iot/images/blynk_hu_c496687e8081e683.webp 1200w&#34;
               src=&#34;http://localhost:1313/project/smart-home-using-iot/images/blynk_hu_6607d9ec66dd0d00.webp&#34;
               width=&#34;422&#34;
               height=&#34;156&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Voice control was implemented using Google Assistant and the IFTTT (If This Then That) platform. Users can give voice commands to control the devices. By assigning specific voice commands for turning on or off the appliances, users can conveniently operate the smart home system using their voice.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Control through Timer:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;flex justify-center	&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Control through Timer&#34; srcset=&#34;
               /project/smart-home-using-iot/images/app2_hu_9772d045fb77c729.webp 400w,
               /project/smart-home-using-iot/images/app2_hu_fdd9a0832828614b.webp 760w,
               /project/smart-home-using-iot/images/app2_hu_b0d3b225f87fb83a.webp 1200w&#34;
               src=&#34;http://localhost:1313/project/smart-home-using-iot/images/app2_hu_9772d045fb77c729.webp&#34;
               width=&#34;258&#34;
               height=&#34;324&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The timer control method enables users to schedule the activation of devices at specific times. Users can set a particular time for the devices to turn on automatically. This feature is useful for automating routines and ensuring that appliances are activated at desired times without manual intervention.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;final-model&#34;&gt;Final Model&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;flex justify-center	&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Final Model&#34; srcset=&#34;
               /project/smart-home-using-iot/images/model_hu_679de8265b7eda3e.webp 400w,
               /project/smart-home-using-iot/images/model_hu_a12d1c64ff7e8631.webp 760w,
               /project/smart-home-using-iot/images/model_hu_4a3b364805ccb0df.webp 1200w&#34;
               src=&#34;http://localhost:1313/project/smart-home-using-iot/images/model_hu_679de8265b7eda3e.webp&#34;
               width=&#34;451&#34;
               height=&#34;449&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>üéâ Drone Control with Keyboard</title>
      <link>http://localhost:1313/project/drone-control-with-keyboard/</link>
      <pubDate>Thu, 23 Mar 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/project/drone-control-with-keyboard/</guid>
      <description>&lt;p&gt;Developed a code to control a drone using a keyboard. It can
perform actions such as takeoff, landing, and controlling the
drone&amp;rsquo;s movements using the arrow keys and other designated keys.&lt;/p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/-XZIpyt2KPE?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;Before running the code, make sure you have the following dependencies installed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 3.x&lt;/li&gt;
&lt;li&gt;Olympe&lt;/li&gt;
&lt;li&gt;pynput&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can install the required Python packages using pip:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install olympe pynput
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Connect to the drone&amp;rsquo;s Wi-Fi network.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update the &lt;code&gt;DRONE_IP&lt;/code&gt; variable in the code to match the IP address of your drone. By default, it is set to &lt;code&gt;10.202.0.1&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the script by executing the following command:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python script.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;
&lt;p&gt;The script will establish a connection with the drone and wait for your input.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the following keys to control the drone:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;t&lt;/strong&gt;: Takeoff&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;l&lt;/strong&gt;: Landing&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;a&lt;/strong&gt;: Move left&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;d&lt;/strong&gt;: Move right&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;w&lt;/strong&gt;: Move forward&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;s&lt;/strong&gt;: Move backward&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;up arrow&lt;/strong&gt;: Increase altitude&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;down arrow&lt;/strong&gt;: Decrease altitude&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;left arrow&lt;/strong&gt;: Rotate left&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;right arrow&lt;/strong&gt;: Rotate right&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;esc&lt;/strong&gt;: Quit the script&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Press the corresponding keys to control the drone&amp;rsquo;s movements. The drone will respond accordingly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To quit the script, press the &lt;strong&gt;esc&lt;/strong&gt; key.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Make sure to fly the drone in a safe environment and comply with all local regulations and laws regarding drone usage.&lt;/p&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;This code is licensed under the &lt;a href=&#34;LICENSE&#34;&gt;MIT License&lt;/a&gt;. Feel free to modify and distribute it as needed.&lt;/p&gt;
&lt;h2 id=&#34;acknowledgments&#34;&gt;Acknowledgments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The Olympe library: &lt;a href=&#34;https://developer.parrot.com/docs/olympe/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://developer.parrot.com/docs/olympe/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The pynput library: &lt;a href=&#34;https://pynput.readthedocs.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://pynput.readthedocs.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>TelloDrone with KeyBoard and Object detection</title>
      <link>http://localhost:1313/project/tellodrone-with-keyboard/</link>
      <pubDate>Tue, 23 Aug 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/project/tellodrone-with-keyboard/</guid>
      <description>&lt;p&gt;This project show how to control a Tello drone using your keyboard and perform object detection using a pre-trained model. The drone movements are controlled using the arrow keys and specific keys for takeoff, landing, and flips. The object detection is performed on the live video feed from the drone&amp;rsquo;s camera.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python 3.x&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getter&lt;/code&gt; module&lt;/li&gt;
&lt;li&gt;&lt;code&gt;djitellopy&lt;/code&gt; library&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pygame&lt;/code&gt; library&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cv2&lt;/code&gt; (OpenCV) library&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cvzone&lt;/code&gt; library&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Clone the repository to your local machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone https://github.com/sainavaneet/TelloDrone-with-KeyBoard-and-Objectdetection.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the required dependencies:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install getter djitellopy pygame opencv-python cvzone
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Import the necessary modules and initialize the required components:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;getter&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;kg&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;djitellopy&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tello&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sleep&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;kg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;drone&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tello&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;drone&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define the function to get keyboard input for drone control:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getKeyboardInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isFlying&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# ... implementation ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ud&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;yw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isFlying&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement the drone control loop:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getKeyboardInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isFlying&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;isFlying&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;drone&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_rc_control&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement object detection using the Tello drone&amp;rsquo;s camera:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# ... import necessary modules ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;thres&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;nmsThres&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# ... load class names and pre-trained model ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# ... get frame from drone&amp;#39;s camera ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# ... perform object detection ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# ... display the detected objects ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# ... get keyboard input and control the drone ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# ... display the frame ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;videos&#34;&gt;Videos&lt;/h2&gt;
&lt;h3 id=&#34;object-detectioin&#34;&gt;OBJECT DETECTIOIN&lt;/h3&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/FL7ku3DEp7o?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;h3 id=&#34;keyboard-control&#34;&gt;KEYBOARD CONTROL&lt;/h3&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/IpdcT8TlTOE?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;h2 id=&#34;contributing&#34;&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Contributions are welcome! If you find any issues or have suggestions for improvements, please create a GitHub issue or submit a pull request.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Tello SDK provided by DJI Ryze Robotics: &lt;a href=&#34;https://github.com/damiafuentes/DJITelloPy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DJITelloPy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pre-trained object detection model: &lt;a href=&#34;https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/tf2_detection_zoo.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TensorFlow Object Detection Model Zoo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</description>
    </item>
    
  </channel>
</rss>
