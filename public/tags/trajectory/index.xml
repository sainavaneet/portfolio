<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Trajectory | Hugo Academic CV Theme</title>
    <link>http://localhost:1313/tags/trajectory/</link>
      <atom:link href="http://localhost:1313/tags/trajectory/index.xml" rel="self" type="application/rss+xml" />
    <description>Trajectory</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Fri, 27 Oct 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>http://localhost:1313/media/icon_hu_645fa481986063ef.png</url>
      <title>Trajectory</title>
      <link>http://localhost:1313/tags/trajectory/</link>
    </image>
    
    <item>
      <title>ðŸŽ‰ Drone Trajectory Tracking with Python</title>
      <link>http://localhost:1313/post/drone-trajctory-tracking/</link>
      <pubDate>Fri, 27 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/drone-trajctory-tracking/</guid>
      <description>&lt;h2 id=&#34;1-dynamics-and-kinematics-of-the-drone&#34;&gt;1. Dynamics and Kinematics of the Drone&lt;/h2&gt;
&lt;p&gt;The dynamics and kinematics of a drone are crucial in understanding and controlling its flight behavior. The drone&amp;rsquo;s state can be described by its position $ x, y, z $
, orientation (roll $ \phi $
, pitch $ \theta $
, and yaw $ \psi $
), and their respective velocities and angular velocities.&lt;/p&gt;
&lt;h3 id=&#34;translational-motion&#34;&gt;Translational Motion&lt;/h3&gt;
&lt;p&gt;The translational motion of the drone can be described by Newton&amp;rsquo;s second law of motion:&lt;/p&gt;

$$
m\ddot{\mathbf{r}} = \mathbf{F} - mg\hat{z}
$$


&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$ m $
 is the mass of the drone.&lt;/li&gt;
&lt;li&gt;$ \ddot{\mathbf{r}} $
 represents the linear acceleration.&lt;/li&gt;
&lt;li&gt;$ \mathbf{F} $
 is the total thrust force generated by the drone&amp;rsquo;s motors.&lt;/li&gt;
&lt;li&gt;$ g $
 is the acceleration due to gravity.&lt;/li&gt;
&lt;li&gt;$ \hat{z} $
 is the unit vector in the vertical direction.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rotational-motion&#34;&gt;Rotational Motion&lt;/h3&gt;
&lt;p&gt;The rotational motion of the drone is described using Euler&amp;rsquo;s equations of motion for a rigid body:&lt;/p&gt;

$$
I \dot{\boldsymbol{\omega}} + \boldsymbol{\omega} \times (I \boldsymbol{\omega}) = \mathbf{\tau}
$$


&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$ I $
 represents the moment of inertia matrix.&lt;/li&gt;
&lt;li&gt;$ \boldsymbol{\omega} $
 is the angular velocity vector (p, q, r).&lt;/li&gt;
&lt;li&gt;$ \mathbf{\tau} $
 is the vector of external torques acting on the drone.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dynamic-system-matrix&#34;&gt;Dynamic System Matrix&lt;/h3&gt;
&lt;p&gt;The dynamics of the drone can be represented in a state-space format, where the state vector $$ \mathbf{x} $$
 might include the position, velocity, orientation, and angular velocity. The state-space model is typically written as:&lt;/p&gt;

$$
\dot{\mathbf{x}} = A\mathbf{x} + B\mathbf{u}
$$



$$
\mathbf{y} = C\mathbf{x} + D\mathbf{u}
$$


&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$ \mathbf{x} $
 is the state vector.&lt;/li&gt;
&lt;li&gt;$ \mathbf{u} $
 is the input vector (like motor thrusts).&lt;/li&gt;
&lt;li&gt;$ \mathbf{y} $
 is the output vector (like measured position and orientation).&lt;/li&gt;
&lt;li&gt;$ A $
 is the system matrix, representing the dynamics of the drone.&lt;/li&gt;
&lt;li&gt;$ B $
 is the input matrix, showing how inputs affect the state.&lt;/li&gt;
&lt;li&gt;$ C $
 is the output matrix, linking the state to the outputs.&lt;/li&gt;
&lt;li&gt;$ D $
 is the direct transmission matrix, usually a zero matrix in drone dynamics.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The matrices $$ A, B, C, D $$
 are determined based on the physical characteristics of the drone and its operational environment. They encapsulate the dynamics and kinematics, converting control inputs into predictions about the drone&amp;rsquo;s future state.&lt;/p&gt;
&lt;h2 id=&#34;2-control-system&#34;&gt;2. Control System&lt;/h2&gt;
&lt;h3 id=&#34;control-inputs&#34;&gt;Control Inputs&lt;/h3&gt;
&lt;p&gt;The control inputs for the drone include thrust $$ U1 $$
 and torques $$ U2, U3, U4 $$
. These inputs are calculated as follows:&lt;/p&gt;

$$
U1 = c_t(\omega_1^2 + \omega_2^2 + \omega_3^2 + \omega_4^2)
$$



$$
U2 = c_t l (\omega_2^2 - \omega_4^2)
$$



$$
U3 = c_t l (\omega_3^2 - \omega_1^2)
$$



$$
U4 = c_q (-\omega_1^2 + \omega_2^2 - \omega_3^2 + \omega_4^2)
$$


&lt;h2 id=&#34;3-trajectory-generation&#34;&gt;3. Trajectory Generation&lt;/h2&gt;
&lt;p&gt;The desired trajectory is represented as a function of time $ t $
:&lt;/p&gt;

$$
X_{ref}(t), Y_{ref}(t), Z_{ref}(t), \psi_{ref}(t)
$$


&lt;h2 id=&#34;4-linear-parameter-varying-lpv-systems&#34;&gt;4. Linear Parameter Varying (LPV) Systems&lt;/h2&gt;
&lt;p&gt;LPV systems are described by the following equations:&lt;/p&gt;

$$
\dot{x}(t) = A(t)x(t) + B(t)u(t)
$$



$$
y(t) = C(t)x(t) + D(t)u(t)
$$


&lt;h2 id=&#34;5-model-predictive-control-mpc&#34;&gt;5. Model Predictive Control (MPC)&lt;/h2&gt;
&lt;p&gt;Model Predictive Control (MPC) is an advanced method of process control that uses a dynamic model to predict and optimize future states of a control system. In the context of drone trajectory tracking, MPC is used to compute the optimal control inputs that will guide the drone along a desired trajectory. The basic formulation of an MPC problem can be given as follows:&lt;/p&gt;

$$
\min_{u} \sum_{k=0}^{N-1} \left( (x_k - x_{ref})^T Q (x_k - x_{ref}) + (u_k - u_{ref})^T R (u_k - u_{ref}) \right)
$$


&lt;p&gt;Subject to the dynamic constraints of the system:&lt;/p&gt;

$$
x_{k+1} = A x_k + B u_k
$$



$$
x_{min} \leq x_k \leq x_{max}
$$



$$
u_{min} \leq u_k \leq u_{max}
$$


&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$ x_k $
 is the state of the system at step $ k $
.&lt;/li&gt;
&lt;li&gt;$ u_k $ is the control input at step $ k $.&lt;/li&gt;
&lt;li&gt;$ x_{ref} $ and $ u_{ref} $ are the reference state and input, respectively.&lt;/li&gt;
&lt;li&gt;$ Q $ and $ R $ are weighting matrices.&lt;/li&gt;
&lt;li&gt;$ N $ is the prediction horizon.&lt;/li&gt;
&lt;li&gt;$ A $ and $ B $ are the system matrices.&lt;/li&gt;
&lt;li&gt;$ x_{min}, x_{max}, u_{min}, u_{max} $ are the bounds on states and inputs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-model-predictive-control-mpc&#34;&gt;6. Model Predictive Control (MPC)&lt;/h2&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/S4rpkbglb5c?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://www.google.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;I&amp;rsquo;m an external link&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
